import { db } from "@/db";
import { users, feedbacks } from "@/db/schema";
import { and, eq, isNull, or, lt } from "drizzle-orm";

export async function GET(req: Request) {
  try {
    console.log("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ legacy –ø–æ–¥–ø–∏—Å–æ–∫");

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å subscribed=true –Ω–æ –±–µ–∑ stripeCustomerId
    // –∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö feedback –ø—Ä–µ–º–∏—É–º–æ–≤
    const currentDate = new Date();

    const legacyUsers = await db.query.users.findMany({
      where: and(eq(users.subscribed, true), isNull(users.stripeCustomerId)),
      columns: {
        id: true,
        email: true,
        subscribed: true,
        createdAt: true,
      },
    });

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${legacyUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å legacy –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`
    );

    let cleanedCount = 0;

    for (const user of legacyUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π feedback –ø—Ä–µ–º–∏—É–º
      const activeFeedback = await db.query.feedbacks.findFirst({
        where: and(
          eq(feedbacks.userId, user.id),
          eq(feedbacks.premiumGranted, true),
          lt(feedbacks.premiumEndDate!, currentDate)
        ),
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ feedback –ø—Ä–µ–º–∏—É–º–∞, –æ—Ç–∫–ª—é—á–∞–µ–º legacy –ø–æ–¥–ø–∏—Å–∫—É
      if (!activeFeedback) {
        await db
          .update(users)
          .set({ subscribed: false })
          .where(eq(users.id, user.id));

        console.log(
          `‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∞ legacy –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`
        );
        cleanedCount++;
      }
    }

    return new Response(
      JSON.stringify({
        success: true,
        totalLegacyUsers: legacyUsers.length,
        cleanedCount,
        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${cleanedCount} legacy –ø–æ–¥–ø–∏—Å–æ–∫`,
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ legacy –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    return new Response(
      JSON.stringify({
        success: false,
        error: String(error),
      }),
      { status: 500 }
    );
  }
}
