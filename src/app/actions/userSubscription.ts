import { db } from "@/db";
import { users } from "@/db/schema";
import { eq, gt } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import {
  grantSubscriptionPremium,
  checkPremiumStatus,
} from "@/lib/premium-manager";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

export async function createSubscription({
  stripeCustomerId,
}: {
  stripeCustomerId: string;
}) {
  console.log("üöÄ =================================");
  console.log("üöÄ CREATE SUBSCRIPTION CALLED");
  console.log("üöÄ stripeCustomerId:", stripeCustomerId);
  console.log("üöÄ =================================");

  const user = await db.query.users.findFirst({
    where: eq(users.stripeCustomerId, stripeCustomerId),
  });

  if (!user) {
    console.error("‚ùå User not found for stripe customer:", stripeCustomerId);
    throw new Error(`User not found for stripe customer: ${stripeCustomerId}`);
  }

  console.log("‚úÖ Found user:", user.id, "email:", user.email);

  const subscriptions = await stripe.subscriptions.list({
    customer: stripeCustomerId,
    status: "all",
    limit: 1,
  });

  const subscription = subscriptions.data[0];

  if (!subscription) {
    console.error("‚ùå No subscription found for customer:", stripeCustomerId);
    throw new Error(`No subscription found for customer: ${stripeCustomerId}`);
  }

  console.log("üìä Subscription details:", {
    id: subscription.id,
    status: subscription.status,
    trial_end: subscription.trial_end,
    current_period_end: subscription.current_period_end,
  });

  // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ —Ç—Ä–∏–∞–ª—å–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
  if (subscription.status === "active") {
    console.log("üéØ Processing active subscription");
    const currentPeriodEnd = new Date(subscription.current_period_end * 1000);

    await db
      .update(users)
      .set({
        premiumExpiresAt: currentPeriodEnd,
        subscribed: true,
      })
      .where(eq(users.id, user.id));

    console.log("‚úÖ Active subscription set until:", currentPeriodEnd);
  } else if (subscription.status === "trialing") {
    console.log(
      "Subscription is in trial period - will be handled by trial_will_end webhook"
    );

    if (subscription.trial_end) {
      const trialEnd = new Date(subscription.trial_end * 1000);

      await db
        .update(users)
        .set({
          premiumExpiresAt: trialEnd,
          subscribed: false, // –¢—Ä–∏–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        })
        .where(eq(users.id, user.id));

      console.log("‚úÖ Trial subscription set until:", trialEnd);
    } else {
      console.log("‚ö†Ô∏è Trial subscription has no trial_end date");
    }
  } else {
    console.log(`‚ö†Ô∏è Unhandled subscription status: ${subscription.status}`);
  }

  revalidatePath("/billing");
  revalidatePath("/dashboard");

  console.log("üèÅ CREATE SUBSCRIPTION COMPLETED");
}

export async function deleteSubscription({
  stripeCustomerId,
}: {
  stripeCustomerId: string;
}) {
  // –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–º–∏—É–º
  // –ü—Ä–µ–º–∏—É–º –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  await db
    .update(users)
    .set({
      subscribed: false, // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    })
    .where(eq(users.stripeCustomerId, stripeCustomerId));

  revalidatePath("/billing");
  revalidatePath("/dashboard");
}

export async function getUserSubscription({ userId }: { userId: string }) {
  const status = await checkPremiumStatus(userId);
  return status.isPremium;
}

export async function refreshSubscriptionStatus(userId: string) {
  "use server";

  const status = await checkPremiumStatus(userId);

  revalidatePath("/billing");
  revalidatePath("/dashboard");

  return status;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
export async function getPremiumStatus(userId: string) {
  "use server";
  return await checkPremiumStatus(userId);
}

export async function handleTrialEnding({
  stripeCustomerId,
  trialEndDate,
}: {
  stripeCustomerId: string;
  trialEndDate: number | null;
}) {
  console.log("üîÑ Handling trial ending for customer:", stripeCustomerId);

  const user = await db.query.users.findFirst({
    where: eq(users.stripeCustomerId, stripeCustomerId),
  });

  if (!user) {
    console.error("‚ùå User not found for stripe customer:", stripeCustomerId);
    throw new Error(`User not found for stripe customer: ${stripeCustomerId}`);
  }

  console.log("üîÑ User found:", user.id, "email:", user.email);

  const currentStatus = await checkPremiumStatus(user.id);

  if (currentStatus.source === "feedback" && currentStatus.isPremium) {
    console.log("‚úÖ User has active feedback premium, keeping it");
    return;
  }

  const trialEnd = trialEndDate ? new Date(trialEndDate * 1000) : null;

  await db
    .update(users)
    .set({
      premiumExpiresAt: trialEnd,
      subscribed: false,
    })
    .where(eq(users.id, user.id));

  console.log("üîÑ Updated user:", user.id, "premiumExpiresAt:", trialEnd);

  revalidatePath("/billing");
  revalidatePath("/dashboard");

  console.log("üèÅ Trial ending handled for user:", user.id);
}